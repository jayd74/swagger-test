/**
 * Swagger QuikOpp
 * This is the swagger API for QuikOpp
 *
 * OpenAPI spec version: 1.0.0
 * Contact: qreateinc@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Company from '../model/Company';

/**
* Company service.
* @module api/CompanyApi
* @version 1.0.0
*/
export default class CompanyApi {

    /**
    * Constructs a new CompanyApi. 
    * @alias module:api/CompanyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the companyCompanyIdDelete operation.
     * @callback module:api/CompanyApi~companyCompanyIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete company
     * This can only be done by the user of the company.
     * @param {module:api/CompanyApi~companyCompanyIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    companyCompanyIdDelete(companyId, callback) {
      let postBody = null;

      let pathParams = {
        'companyId': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/company/{companyId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the companyCompanyIdGet operation.
     * @callback module:api/CompanyApi~companyCompanyIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Company} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get company by companyId
     * @param {module:api/CompanyApi~companyCompanyIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Company}
     */
    companyCompanyIdGet(companyId, callback) {
      let postBody = null;

      let pathParams = {
        'companyId': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Company;

      return this.apiClient.callApi(
        '/company/{companyId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the companyCompanyIdPost operation.
     * @callback module:api/CompanyApi~companyCompanyIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register New Company
     * This only called after verification of the company registration
     * @param {module:api/CompanyApi~companyCompanyIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    companyCompanyIdPost(companyId, callback) {
      let postBody = null;

      let pathParams = {
        'companyId': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/company/{companyId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the companyCompanyIdPut operation.
     * @callback module:api/CompanyApi~companyCompanyIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updated company
     * This can only be done by the user of the company.
     * @param {Object} opts Optional parameters
     * @param {module:api/CompanyApi~companyCompanyIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    companyCompanyIdPut(companyId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        'companyId': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['body'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/company/{companyId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
